{"name":"Solr sparse faceting","tagline":"Fast high cardinality faceting for small result sets","body":"## Sparse faceting for Solr\r\nThis project is for the [SOLR-5894](https://issues.apache.org/jira/browse/SOLR-5894) patch.\r\n\r\n### Elevator pitch\r\nSparse faceting speeds up the majority of Solr searches that uses faceting on large (100.000+ unique terms) text fields, such as _author_ or _title_. The speed-up is extremely dependent on the setup, but expect at least a factor 2 for single-shard indexes and more for multi-shard.\r\n\r\n### Download and usage\r\nDownload the WAR and use it instead of the standard Solr WAR. Or build the wanted artefacts from source; as sparse integrates with the existing facet code, no tweaks are needed to solrconfig. Solr 4.8 & 4.9 is currently supported.\r\n* [Solr 4.8 & 4.9 sparse WAR](https://github.com/tokee/lucene-solr/releases/tag/sparse_4.8_20140914-alpha)\r\n\r\nSee [SparseKeys.java](https://github.com/tokee/lucene-solr/blob/lucene_solr_4_8_sparse/solr/core/src/java/org/apache/solr/request/sparse/SparseKeys.java) for a detailed description of the dials to tweak.\r\n\r\nSome sample calls\r\n* [http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield](http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield)  \r\nA standard faceting call, which should trigger sparse faceting if the number of unique values is 10.000+ in mytextfield. Note that mode _must_ be fc for sparse to work: Solr uses fc per default for large text fields, so there is probably no need to state it explicitly.\r\n* [http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield&**facet.sparse.stats=true**](http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield&facet.sparse.stats=true)  \r\nAn ugly hack that provides statistics on sparse faceting by returning it as part of the facet result. Only intended for experimenting, but very useful to determine if sparse is activated at all.\r\n* [http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield&**facet.sparse.skiprefinements=true**](http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield&facet.sparse.skiprefinements=true)  \r\nIn a multi-shard setup this speeds up faceting at the cost of precision, by skipping the fine-counting of facets. The reported counts will be <= the true counts. Use it if response time is paramount.\r\n* [http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield&**facet.sparse.maxtracked=255**](http://localhost:8983/solr/collection1/select?wt=xml&q=myquery&facet.field=mytextfield&facet.sparse.maxtracked=255)  \r\nMaxtracked sets an upper limit for the counts in the facets in the shards (the total count in a distributed setting might be higher). This might speed things up a bit (the values 15, 255 & 65535 are good for this) and lowers the memory requirement for faceting. Use it if memory usage is paramount.\r\n\r\n## How well does this work?\r\nWhen we enabled sparse faceting for our core index (50GB / 14M docs / 2 large, 6 small facets) at the State and University Library, Denmark, we observed that our response times during work hours were halved, compared to 7 days earlier:\r\n\r\n![Before and after enabling of sparse faceting at Statsbiblioteket](graphs/workhours_20140903-20140910.png)\r\n\r\nFor the Danish Web Archive (12TB / 4B docs / 1 massive, 3 large, 2 small facets), response times dropped to less than 1/5 when using sparse faceting.\r\n\r\n![Solr fc faceting vs. sparse faceting at the Danish Web Archive](graphs/sparse_factor_60min_12.5TB_4.2B_solr_sparse_finecount_l10.png)\r\n\r\nSee the links at the bottom for full reports on our observations.\r\n\r\n### Is this reliable?\r\nWe use it in production at [State and University Library, Denmark](http://statsbiblioteket.dk/) with millions of unique values in the facets and at the [Danish Web Archive](http://netarkivet.dk/) with billions of unique values in one of the facets. The patch does not change the index in any way, so the worst thing that can happen is that one needs to switch back to standard Solr.\r\n\r\n### The sparse principle\r\nStandard Solr fc String faceting maintains an array of counters for all possible values in the facet. The counters are incremented based on the document IDs from the search and all counters are iterated to extract top-X, including the ones that have not been touched. Sparse faceting keeps track of which counters are incremented, so only those are iterated. For small result sets and fields with many unique values, the time-saving is substantial. Empirical measurements puts \"small result sets\" around 8% or less of the total document count and suggests that most user-issued searches are below this.\r\n\r\nStandard Solr allocates facet counter structures when needed and frees them after use. This takes time upon allocation (think 10s of milliseconds) and taxes the garbage collector. Sparse faceting maintains a pool of counters and clears them using a background thread, meaning instant counter \"allocation\" and no taxing of the garbage collector.\r\n\r\nDistributed faceting on a multi-shard Solr setup require fine-counting for some of the terms. Standard Solr handles this with a mini-search for each term, while sparse faceting uses full counting followed by extraction of counts for the specified terms. This turns out to be much faster. Think factor 10.\r\n\r\n### The downside\r\nSparse faceting does not help with single-shard searches with large result sets. Fortunately it does not hurt either as it falls back to the Solr standard way of counting: There are a lot of knobs to tune this, but the default are chosen conservatively, so the chance of having worse-than-standard response times is quite low. For multi-shard searches, sparse faceting should be faster for practically all setups and result set sizes.\r\n\r\nThe existence of a cache for the counter structures does result in a permanent memory overhead, as opposed to a variable one with standard Solr fc faceting. The size of the cache can be controlled, so it is possible to disable it fully, if this is a concern. \r\n\r\n### Why is this not in standard Solr?\r\nBasically because it needs a Solr committer to accept the patch. Visit [SOLR-5894](https://issues.apache.org/jira/browse/SOLR-5894) and vote for it, if you want to encourage this.\r\n\r\nIt is not just a question of the committer pressing _accept_ though. The patch needs to be tested independently and the committer should have some experience with the Solr faceting code, in order to ensure that SOLR-5894 plays nice with the rest of the code base.\r\n\r\n### More reading and tests\r\n* [Terabyte index, search and faceting with Solr](https://sbdevel.wordpress.com/2014/06/17/terabyte-index-search-and-faceting-with-solr/)\r\n* [Ten times faster](https://sbdevel.wordpress.com/2014/08/26/ten-times-faster/)\r\n* [Even sparse faceting is limited](https://sbdevel.wordpress.com/author/eskildsen/)\r\n* [Small scale sparse faceting](https://sbdevel.wordpress.com/2014/09/09/small-scale-sparse-faceting/)\r\n\r\n### Who made this?\r\nSparse faceting is the work of Toke Eskildsen. Most of the code was implemented on company time at the State and University Library, Denmark. It was fueled partly by the need for snappy responses from the Danish Web Archive, partly because the gains are just too awesome to let pass. Many thanks to the State and University Library for supporting Open Source by allocating the time needed to make such things public.\r\n\r\nFeel free to contact Toke Eskildsen, te@statsbiblioteket.dk, [@TokeEskildsen](https://twitter.com/TokeEskildsen)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}