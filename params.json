{"name":"Solr sparse faceting","tagline":"Fast high cardinality faceting for small result sets","body":"## Sparse faceting for Solr\r\nThis project is for the [SOLR-5894](https://issues.apache.org/jira/browse/SOLR-5894) patch.\r\n\r\n### Elevator pitch\r\nSparse faceting speeds up the majority of Solr searches that uses faceting on large (100.000+ unique terms) text fields, such as _author_ or _title_. The speed-up is extremely dependent on the setup, but expect at least a factor 2 for single-shard indexes and more for multi-shard.\r\n\r\n### Download and usage\r\nSimply download the Solr WAR and use that instead of the standard one. Or build the latest version from source (Solr 4.8 and 4.9 currently supported).\r\n* [Solr 4.8 sparse WAR](https://github.com/tokee/lucene-solr/releases/tag/sparse_4.8_20140912-alpha)\r\n\r\nSee [SparseKeys.java](https://github.com/tokee/lucene-solr/blob/lucene_solr_4_8_sparse/solr/core/src/java/org/apache/solr/request/sparse/SparseKeys.java) for the dials to tweak.\r\n\r\n### Is this reliable?\r\nWe use it in production at [State and University Library, Denmark](http://statsbiblioteket.dk/) with millions of unique values in the facets and at the [Danish Web Archive](http://netarkivet.dk/) with billions of unique values in on of the facets. The patch does not change the index in any way, so the worst thing that can happen is that one needs to switch back to standard Solr.\r\n\r\n### The sparse principle\r\nStandard Solr fc String faceting maintains an array of counters for all possible values in the facet. The counters are updated based on the document IDs from the search and then iterated to extract top-X. Sparse faceting keeps track of which counters are updated, so only those are iterated. For fields with many unique values, the time-saving is substantial for small result sets. Empirical measurements puts \"small\" around 8% or less and suggests that most user-issued searches are below this.\r\n\r\nStandard Solr allocates the counter structures when needed and frees them after use. This takes time upon allocation (think 10s of milliseconds) and taxes the garbage collector. Sparse faceting maintains a pool of counters and clears them using a background thread, meaning instant counter \"allocation\" and no taxing of the garbage collector.\r\n\r\nDistributed faceting on a multi-shard Solr setup require fine-counting for some terms. Standard Solr handles this with a mini-search for each term, while sparse faceting uses full counting and extraction of counts for the specified terms. This turns out to be much faster. Think factor 10.\r\n\r\n### The downside\r\nSparse faceting does not help with single-shard searches with large result sets. Fortunately it does not hurt either as it falls back to the standard way of counting - there are a lot of knobs to tune this, but the default are chosen conservatively so the chance of having worse-than-standard response times is quite low. For multi-shard searches, sparse faceting should be faster for nearly all setups.\r\n\r\n### More reading\r\n* [Terabyte index, search and faceting with Solr](https://sbdevel.wordpress.com/2014/06/17/terabyte-index-search-and-faceting-with-solr/)\r\n* [Ten times faster](https://sbdevel.wordpress.com/2014/08/26/ten-times-faster/)\r\n* [Even sparse faceting is limited](https://sbdevel.wordpress.com/author/eskildsen/)\r\n* [Small scale sparse faceting](https://sbdevel.wordpress.com/2014/09/09/small-scale-sparse-faceting/)\r\n\r\n### Why is this not in standard Solr?\r\nBasically because it needs a Solr committer to accept the patch. Visit [SOLR-5894](https://issues.apache.org/jira/browse/SOLR-5894) and vote for it, if you want to encourage this.\r\n\r\nIt is not just a question of the committer pressing _accept_ though. The patch needs to be tested independently and the committer should have some experience with the Solr faceting code, in order to ensure that SOLR-5894 plays nice with the rest of the code base.\r\n\r\n### Who made this?\r\nSparse faceting is the work of Toke Eskildsen. Most of the code was implemented on company time at the State and University Library, Denmark. It was fueled partly by the need for snappy responses from the Danish Web Archive, partly because the gains are just too awesome to let pass. Great thanks to the State and University Library for supporting Open Source by allocating the time needed to make such things public.\r\n\r\nFeel free to contact Toke Eskildsen, te@statsbiblioteket.dk, [@TokeEskildsen](https://twitter.com/TokeEskildsen)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}